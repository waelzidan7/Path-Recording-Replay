import os, sys, argparse

def _lazy_imports():
    try:
        import pandas as pd
        import numpy as np
        import matplotlib.pyplot as plt
        from matplotlib import animation
        return pd, np, plt, animation
    except Exception:
        print("Missing dependencies. Please run:", file=sys.stderr)
        print("  pip install -r requirements.txt", file=sys.stderr)
        raise

def load_csv(csv_path):
    import pandas as pd
    df = pd.read_csv(csv_path)
    needed = ["timestamp","tx","ty","tz","qx","qy","qz","qw"]
    missing = [c for c in needed if c not in df.columns]
    if missing:
        raise ValueError(f"CSV missing columns: {missing}")
    return df

def parse_tum_to_df(tum_path):
    import pandas as pd
    rows=[]
    with open(tum_path, "r") as f:
        for line in f:
            line=line.strip()
            if not line or line.startswith("#"):
                continue
            parts = line.split()
            if len(parts)==8:
                ts, tx, ty, tz, qx, qy, qz, qw = parts
                rows.append({
                    "timestamp": float(ts),
                    "tx": float(tx), "ty": float(ty), "tz": float(tz),
                    "qx": float(qx), "qy": float(qy), "qz": float(qz), "qw": float(qw)
                })
    if not rows:
        raise ValueError("No valid TUM lines found in file.")
    return pd.DataFrame(rows)

def normalize_center(df, center=True):
    if not center:
        return df
    cx = df["tx"].iloc[0]
    cy = df["ty"].iloc[0]
    cz = df["tz"].iloc[0]
    df = df.copy()
    df["tx"] = df["tx"] - cx
    df["ty"] = df["ty"] - cy
    df["tz"] = df["tz"] - cz
    return df

def downsample(df, k=1):
    if k<=1:
        return df
    return df.iloc[::k].reset_index(drop=True)

def ensure_dirs():
    os.makedirs("results", exist_ok=True)
    os.makedirs("videos", exist_ok=True)

def plot_topdown(df, out_path="results/path_topdown.png"):
    _, np, plt, _ = _lazy_imports()
    x = df["tx"].to_numpy()
    z = df["tz"].to_numpy()
    plt.figure(figsize=(6,6))
    plt.plot(x, z, linewidth=2)
    plt.scatter([x[0]],[z[0]], marker="o", s=50, label="start")
    plt.scatter([x[-1]],[z[-1]], marker="X", s=70, label="end")
    plt.title("Top-Down Trajectory (X vs Z)")
    plt.xlabel("X (m)")
    plt.ylabel("Z (m)")
    plt.axis("equal")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.savefig(out_path, dpi=200)
    plt.close()
    print(f"Saved {out_path}")

def plot_3d(df, out_path="results/path_3d.png"):
    _, np, plt, _ = _lazy_imports()
    from mpl_toolkits.mplot3d import Axes3D  # noqa: F401
    fig = plt.figure(figsize=(7,6))
    ax = fig.add_subplot(111, projection="3d")
    x = df["tx"].to_numpy()
    y = df["ty"].to_numpy()
    z = df["tz"].to_numpy()
    ax.plot(x, y, z, linewidth=1.5)
    ax.scatter([x[0]],[y[0]],[z[0]], marker="o", s=40, label="start")
    ax.scatter([x[-1]],[y[-1]],[z[-1]], marker="X", s=60, label="end")
    ax.set_title("3D Trajectory")
    ax.set_xlabel("X (m)"); ax.set_ylabel("Y (m)"); ax.set_zlabel("Z (m)")
    import numpy as np
    all_pts = np.vstack([x,y,z]).T
    mins = all_pts.min(axis=0); maxs = all_pts.max(axis=0)
    centers = (mins+maxs)/2.0; ranges = (maxs-mins).max()
    ax.set_xlim(centers[0]-ranges/2, centers[0]+ranges/2)
    ax.set_ylim(centers[1]-ranges/2, centers[1]+ranges/2)
    ax.set_zlim(centers[2]-ranges/2, centers[2]+ranges/2)
    ax.legend()
    plt.tight_layout()
    plt.savefig(out_path, dpi=200)
    plt.close()
    print(f"Saved {out_path}")

def animate_topdown(df, out_path="videos/path_replay.mp4", fps=30):
    import uuid
    import subprocess
    _, np, plt, animation = _lazy_imports()

    x = df["tx"].to_numpy()
    z = df["tz"].to_numpy()
    fig = plt.figure(figsize=(6,6))
    ax = plt.gca()
    ax.set_title("Top-Down Path Replay (X vs Z)")
    ax.set_xlabel("X (m)"); ax.set_ylabel("Z (m)")
    ax.grid(True); ax.axis("equal")

    line, = ax.plot([], [], linewidth=2)
    ax.scatter([x[0]],[z[0]], marker="o", s=50, label="start")
    ax.scatter([x[-1]],[z[-1]], marker="X", s=70, label="end")
    ax.legend()

    pad = 0.05
    xmin, xmax = x.min(), x.max()
    zmin, zmax = z.min(), z.max()
    dx = xmax - xmin; dz = zmax - zmin
    ax.set_xlim(xmin - pad*dx, xmax + pad*dx)
    ax.set_ylim(zmin - pad*dz, zmax + pad*dz)

    def init():
        line.set_data([], [])
        return (line,)

    def update(i):
        line.set_data(x[:i], z[:i])
        return (line,)

    frames = len(x)
    ani = animation.FuncAnimation(fig, update, init_func=init, frames=frames, interval=1000/fps, blit=True)

    os.makedirs(os.path.dirname(out_path), exist_ok=True)

    try:
        Writer = animation.writers['ffmpeg']
    except KeyError:
        print("ffmpeg is not available. Install it via:", file=sys.stderr)
        print("  sudo apt-get update && sudo apt-get install ffmpeg", file=sys.stderr)
        plt.close(fig)
        return

    # Use temp file to save initial video
    temp_name = f"{os.path.splitext(out_path)[0]}_temp_{uuid.uuid4().hex}.mp4"
    writer = Writer(fps=fps, metadata=dict(artist='replay_trajectory.py'), bitrate=1800)
    ani.save(temp_name, writer=writer, dpi=180)
    plt.close(fig)

    # Use ffmpeg to slow down video playback to 0.5x (double duration)
    try:
        subprocess.run([
            "ffmpeg", "-y", "-i", temp_name,
            "-filter:v", "setpts=2.0*PTS",
            out_path
        ], check=True)
        os.remove(temp_name)  # Clean up temp file
        print(f"Saved {out_path} (slowed down to 0.5Ã— speed)")
    except Exception as e:
        print(f"Failed to slow video with ffmpeg: {e}", file=sys.stderr)
        print(f"Keeping unslowed version at: {temp_name}")


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--csv", default="results/poses.csv", help="CSV with columns [timestamp, tx ty tz qx qy qz qw]")
    ap.add_argument("--tum", default=None, help="Optional TUM file (CameraTrajectory.txt). If given, overrides --csv.")
    ap.add_argument("--center", action="store_true", help="Center/normalize path at first pose")
    ap.add_argument("--downsample", type=int, default=1, help="Keep every k-th pose (>=1)")
    ap.add_argument("--make3d", action="store_true", help="Also save 3D plot")
    ap.add_argument("--animate", action="store_true", help="Export MP4 animation (requires ffmpeg)")
    args = ap.parse_args()

    ensure_dirs()

    if args.tum is not None:
        df = parse_tum_to_df(args.tum)
    else:
        if not os.path.isfile(args.csv):
            print(f"CSV not found: {args.csv}", file=sys.stderr)
            sys.exit(2)
        df = load_csv(args.csv)

    df = df.sort_values(by="timestamp").reset_index(drop=True)
    if args.downsample > 1:
        df = downsample(df, args.downsample)
    if args.center:
        df = normalize_center(df, center=True)

    plot_topdown(df, out_path="results/path_topdown.png")
    if args.make3d:
        plot_3d(df, out_path="results/path_3d.png")
    if args.animate:
        animate_topdown(df, out_path="videos/path_replay.mp4")

if __name__ == "__main__":
    main()
